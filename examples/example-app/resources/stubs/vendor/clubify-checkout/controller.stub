<?php

declare(strict_types=1);

namespace App\Http\Controllers;

use Clubify\Checkout\Laravel\Facades\ClubifyCheckout;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;

/**
 * {{ class }} Controller
 *
 * Template para controladores que usam o Clubify Checkout SDK
 */
class {{ class }}Controller extends Controller
{
    /**
     * Display a listing of the resource
     */
    public function index(): JsonResponse
    {
        try {
            // Exemplo de uso do SDK
            $stats = ClubifyCheckout::getStats();

            return response()->json([
                'success' => true,
                'data' => $stats,
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'error' => $e->getMessage(),
            ], 500);
        }
    }

    /**
     * Store a newly created resource in storage
     */
    public function store(Request $request): JsonResponse
    {
        try {
            $validated = $request->validate([
                // Adicione suas regras de validação aqui
                'name' => 'required|string|max:255',
                'email' => 'required|email',
            ]);

            // Exemplo de criação usando o SDK
            $result = ClubifyCheckout::customers()->customer()->create($validated);

            return response()->json([
                'success' => true,
                'data' => $result,
            ], 201);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'error' => $e->getMessage(),
            ], 500);
        }
    }

    /**
     * Display the specified resource
     */
    public function show(string $id): JsonResponse
    {
        try {
            // Exemplo de busca usando o SDK
            $result = ClubifyCheckout::customers()->customer()->find($id);

            if (!$result) {
                return response()->json([
                    'success' => false,
                    'error' => 'Resource not found',
                ], 404);
            }

            return response()->json([
                'success' => true,
                'data' => $result,
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'error' => $e->getMessage(),
            ], 500);
        }
    }

    /**
     * Update the specified resource in storage
     */
    public function update(Request $request, string $id): JsonResponse
    {
        try {
            $validated = $request->validate([
                // Adicione suas regras de validação aqui
                'name' => 'sometimes|string|max:255',
                'email' => 'sometimes|email',
            ]);

            // Exemplo de atualização usando o SDK
            $result = ClubifyCheckout::customers()->customer()->update($id, $validated);

            return response()->json([
                'success' => true,
                'data' => $result,
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'error' => $e->getMessage(),
            ], 500);
        }
    }

    /**
     * Remove the specified resource from storage
     */
    public function destroy(string $id): JsonResponse
    {
        try {
            // Exemplo de exclusão usando o SDK
            ClubifyCheckout::customers()->customer()->delete($id);

            return response()->json([
                'success' => true,
                'message' => 'Resource deleted successfully',
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'error' => $e->getMessage(),
            ], 500);
        }
    }

    /**
     * Processa pagamento
     */
    public function processPayment(Request $request): JsonResponse
    {
        try {
            $validated = $request->validate([
                'amount' => 'required|numeric|min:0.01',
                'currency' => 'required|string|size:3',
                'payment_method' => 'required|string',
                'customer_id' => 'required|string',
                // Adicione outras validações conforme necessário
            ]);

            // Processa pagamento de forma assíncrona
            ClubifyCheckout::queue('processPayment', [$validated]);

            return response()->json([
                'success' => true,
                'message' => 'Payment queued for processing',
            ], 202);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'error' => $e->getMessage(),
            ], 500);
        }
    }

    /**
     * Webhook handler
     */
    public function webhook(Request $request): JsonResponse
    {
        try {
            // O middleware ValidateWebhook já validou a assinatura
            $event = $request->attributes->get('webhook_event');
            $data = $request->attributes->get('webhook_data');

            // Processa o evento do webhook
            $this->handleWebhookEvent($event, $data);

            return response()->json([
                'success' => true,
                'message' => 'Webhook processed successfully',
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'error' => $e->getMessage(),
            ], 500);
        }
    }

    /**
     * Manipula eventos de webhook
     */
    private function handleWebhookEvent(string $event, array $data): void
    {
        match ($event) {
            'payment.success' => $this->handlePaymentSuccess($data),
            'payment.failed' => $this->handlePaymentFailed($data),
            'customer.created' => $this->handleCustomerCreated($data),
            'order.completed' => $this->handleOrderCompleted($data),
            default => logger("Unhandled webhook event: {$event}", $data),
        };
    }

    /**
     * Manipula sucesso do pagamento
     */
    private function handlePaymentSuccess(array $data): void
    {
        // Implementar lógica para pagamento bem-sucedido
        logger('Payment successful', $data);
    }

    /**
     * Manipula falha do pagamento
     */
    private function handlePaymentFailed(array $data): void
    {
        // Implementar lógica para pagamento falhado
        logger('Payment failed', $data);
    }

    /**
     * Manipula criação de cliente
     */
    private function handleCustomerCreated(array $data): void
    {
        // Implementar lógica para cliente criado
        logger('Customer created', $data);
    }

    /**
     * Manipula conclusão do pedido
     */
    private function handleOrderCompleted(array $data): void
    {
        // Implementar lógica para pedido concluído
        logger('Order completed', $data);
    }
}