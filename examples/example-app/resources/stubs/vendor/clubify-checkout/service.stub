<?php

declare(strict_types=1);

namespace App\Services;

use Clubify\Checkout\Laravel\Facades\ClubifyCheckout;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;

/**
 * {{ class }} Service
 *
 * Template para serviços que usam o Clubify Checkout SDK
 */
class {{ class }}Service
{
    /**
     * Cache TTL em segundos
     */
    private const CACHE_TTL = 3600;

    /**
     * Cria um novo recurso
     */
    public function create(array $data): array
    {
        try {
            Log::info("Creating {{ resource }}", ['data' => $data]);

            // Valida dados antes de enviar
            $validatedData = $this->validateData($data);

            // Usa o SDK para criar o recurso
            $result = ClubifyCheckout::{{ module }}()->{{ resource }}()->create($validatedData);

            Log::info("{{ resource }} created successfully", ['id' => $result['id'] ?? null]);

            // Limpa cache relacionado
            $this->clearRelatedCache($result['id'] ?? null);

            return $result;
        } catch (\Exception $e) {
            Log::error("Failed to create {{ resource }}", [
                'error' => $e->getMessage(),
                'data' => $data,
            ]);

            throw $e;
        }
    }

    /**
     * Busca um recurso por ID
     */
    public function find(string $id): ?array
    {
        try {
            return Cache::remember(
                $this->getCacheKey('find', $id),
                self::CACHE_TTL,
                fn() => ClubifyCheckout::{{ module }}()->{{ resource }}()->find($id)
            );
        } catch (\Exception $e) {
            Log::error("Failed to find {{ resource }}", [
                'id' => $id,
                'error' => $e->getMessage(),
            ]);

            throw $e;
        }
    }

    /**
     * Lista recursos com filtros
     */
    public function list(array $filters = [], int $limit = 20, int $offset = 0): array
    {
        try {
            $cacheKey = $this->getCacheKey('list', md5(serialize($filters) . $limit . $offset));

            return Cache::remember(
                $cacheKey,
                self::CACHE_TTL,
                fn() => ClubifyCheckout::{{ module }}()->{{ resource }}()->list($filters, $limit, $offset)
            );
        } catch (\Exception $e) {
            Log::error("Failed to list {{ resource }}s", [
                'filters' => $filters,
                'error' => $e->getMessage(),
            ]);

            throw $e;
        }
    }

    /**
     * Atualiza um recurso
     */
    public function update(string $id, array $data): array
    {
        try {
            Log::info("Updating {{ resource }}", ['id' => $id, 'data' => $data]);

            // Valida dados antes de enviar
            $validatedData = $this->validateData($data, false);

            // Usa o SDK para atualizar o recurso
            $result = ClubifyCheckout::{{ module }}()->{{ resource }}()->update($id, $validatedData);

            Log::info("{{ resource }} updated successfully", ['id' => $id]);

            // Limpa cache relacionado
            $this->clearRelatedCache($id);

            return $result;
        } catch (\Exception $e) {
            Log::error("Failed to update {{ resource }}", [
                'id' => $id,
                'error' => $e->getMessage(),
                'data' => $data,
            ]);

            throw $e;
        }
    }

    /**
     * Remove um recurso
     */
    public function delete(string $id): bool
    {
        try {
            Log::info("Deleting {{ resource }}", ['id' => $id]);

            // Usa o SDK para remover o recurso
            $result = ClubifyCheckout::{{ module }}()->{{ resource }}()->delete($id);

            Log::info("{{ resource }} deleted successfully", ['id' => $id]);

            // Limpa cache relacionado
            $this->clearRelatedCache($id);

            return $result;
        } catch (\Exception $e) {
            Log::error("Failed to delete {{ resource }}", [
                'id' => $id,
                'error' => $e->getMessage(),
            ]);

            throw $e;
        }
    }

    /**
     * Busca recursos com critérios
     */
    public function search(array $criteria): array
    {
        try {
            $cacheKey = $this->getCacheKey('search', md5(serialize($criteria)));

            return Cache::remember(
                $cacheKey,
                self::CACHE_TTL,
                fn() => ClubifyCheckout::{{ module }}()->{{ resource }}()->search($criteria)
            );
        } catch (\Exception $e) {
            Log::error("Failed to search {{ resource }}s", [
                'criteria' => $criteria,
                'error' => $e->getMessage(),
            ]);

            throw $e;
        }
    }

    /**
     * Processa operação assíncrona
     */
    public function processAsync(string $operation, array $data): void
    {
        try {
            Log::info("Queuing {{ resource }} operation", [
                'operation' => $operation,
                'data' => $data,
            ]);

            // Usa facade para processar de forma assíncrona
            ClubifyCheckout::queue($operation, $data);

            Log::info("{{ resource }} operation queued successfully", [
                'operation' => $operation,
            ]);
        } catch (\Exception $e) {
            Log::error("Failed to queue {{ resource }} operation", [
                'operation' => $operation,
                'error' => $e->getMessage(),
            ]);

            throw $e;
        }
    }

    /**
     * Obtém estatísticas do recurso
     */
    public function getStats(): array
    {
        try {
            return Cache::remember(
                $this->getCacheKey('stats'),
                self::CACHE_TTL,
                fn() => ClubifyCheckout::{{ module }}()->getStats()
            );
        } catch (\Exception $e) {
            Log::error("Failed to get {{ resource }} stats", [
                'error' => $e->getMessage(),
            ]);

            throw $e;
        }
    }

    /**
     * Valida dados do recurso
     */
    private function validateData(array $data, bool $isCreate = true): array
    {
        // Implementar validação específica do recurso

        if ($isCreate) {
            // Validação para criação
            $required = ['name', 'email']; // Ajustar conforme necessário

            foreach ($required as $field) {
                if (!isset($data[$field]) || empty($data[$field])) {
                    throw new \InvalidArgumentException("Field {$field} is required");
                }
            }
        }

        // Validação comum
        if (isset($data['email']) && !filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {
            throw new \InvalidArgumentException('Invalid email format');
        }

        return $data;
    }

    /**
     * Gera chave de cache
     */
    private function getCacheKey(string $operation, string $id = 'default'): string
    {
        return "clubify.{{ resource }}.{$operation}.{$id}";
    }

    /**
     * Limpa cache relacionado ao recurso
     */
    private function clearRelatedCache(?string $id = null): void
    {
        $keys = [
            $this->getCacheKey('list'),
            $this->getCacheKey('stats'),
        ];

        if ($id) {
            $keys[] = $this->getCacheKey('find', $id);
        }

        foreach ($keys as $key) {
            Cache::forget($key);
        }

        // Limpa cache com padrão
        Cache::flush(); // Ou usar tags se disponível
    }

    /**
     * Manipula eventos relacionados ao recurso
     */
    public function handleEvent(string $event, array $data): void
    {
        try {
            Log::info("Handling {{ resource }} event", [
                'event' => $event,
                'data' => $data,
            ]);

            match ($event) {
                'created' => $this->handleCreated($data),
                'updated' => $this->handleUpdated($data),
                'deleted' => $this->handleDeleted($data),
                default => Log::warning("Unhandled {{ resource }} event: {$event}"),
            };
        } catch (\Exception $e) {
            Log::error("Failed to handle {{ resource }} event", [
                'event' => $event,
                'error' => $e->getMessage(),
            ]);
        }
    }

    /**
     * Manipula evento de criação
     */
    private function handleCreated(array $data): void
    {
        // Implementar lógica específica
    }

    /**
     * Manipula evento de atualização
     */
    private function handleUpdated(array $data): void
    {
        // Implementar lógica específica
    }

    /**
     * Manipula evento de exclusão
     */
    private function handleDeleted(array $data): void
    {
        // Implementar lógica específica
    }
}