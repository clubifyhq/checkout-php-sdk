<?php

require_once __DIR__ . '/../vendor/autoload.php';

use Clubify\Checkout\ClubifyCheckoutSDK;

/**
 * Exemplo de uso do SDK com funcionalidades de Super Admin
 * Vers√£o resiliente com verifica√ß√µes GET antes de criar recursos
 */

/**
 * Helper function para encontrar tenant por dom√≠nio
 */
function findTenantByDomain($sdk, $domain) {
    try {
        // Usar o m√©todo espec√≠fico da API (mais eficiente)
        $tenant = $sdk->superAdmin()->getTenantByDomain($domain);
        if ($tenant) {
            return $tenant;
        }

        // Fallback: buscar todos os tenants e filtrar manualmente
        $tenants = $sdk->superAdmin()->listTenants();
        foreach ($tenants['data'] as $tenant) {
            if (isset($tenant['domain']) && $tenant['domain'] === $domain) {
                return $tenant;
            }
            if (isset($tenant['custom_domain']) && $tenant['custom_domain'] === $domain) {
                return $tenant;
            }
        }
        return null;
    } catch (Exception $e) {
        echo "‚ö†Ô∏è  Erro ao buscar tenants por dom√≠nio: " . $e->getMessage() . "\n";
        return null;
    }
}

/**
 * Helper function para encontrar tenant por subdom√≠nio
 */
function findTenantBySubdomain($sdk, $subdomain) {
    try {
        // Primeiro tenta usar o m√©todo espec√≠fico do SDK (mais eficiente)
        try {
            $tenant = $sdk->organization()->tenant()->getTenantBySubdomain($subdomain);
            if ($tenant) {
                return $tenant;
            }
        } catch (Exception $e) {
            echo "‚ÑπÔ∏è  M√©todo espec√≠fico n√£o dispon√≠vel, usando listTenants...\n";
        }

        // Fallback: busca manual (API n√£o suporta filtros espec√≠ficos)
        $tenants = $sdk->superAdmin()->listTenants();
        foreach ($tenants['data'] as $tenant) {
            if (isset($tenant['subdomain']) && $tenant['subdomain'] === $subdomain) {
                return $tenant;
            }
        }
        return null;
    } catch (Exception $e) {
        echo "‚ö†Ô∏è  Erro ao buscar tenants por subdom√≠nio: " . $e->getMessage() . "\n";
        return null;
    }
}

/**
 * Helper function para criar ou encontrar organiza√ß√£o
 */
function getOrCreateOrganization($sdk, $organizationData) {
    echo "üîç Verificando se organiza√ß√£o j√° existe...\n";

    // Verificar por dom√≠nio customizado
    if (isset($organizationData['custom_domain'])) {
        $existingTenant = findTenantByDomain($sdk, $organizationData['custom_domain']);
        if ($existingTenant) {
            echo "‚úÖ Organiza√ß√£o encontrada pelo dom√≠nio customizado: {$organizationData['custom_domain']}\n";

            // Ajustar para a estrutura da API: {success, data, message}
            $tenantData = $existingTenant['data'] ?? $existingTenant;
            $tenantId = $tenantData['_id'] ?? $tenantData['id'] ?? 'unknown';

            // Registrar tenant existente para permitir altern√¢ncia de contexto
            try {
                echo "üîë Registrando tenant existente para altern√¢ncia de contexto...\n";
                $sdk->registerExistingTenant($tenantId, $tenantData);
                echo "‚úÖ Tenant registrado com sucesso para altern√¢ncia de contexto\n";

                // Tentar provisionar credenciais se necess√°rio
                if (!isset($tenantData['api_key']) || empty($tenantData['api_key'])) {
                    echo "üîß Tenant sem API key detectado, tentando provisionar credenciais...\n";
                    try {
                        $provisionResult = $sdk->superAdmin()->provisionTenantCredentials($tenantId, [
                            'admin_email' => $organizationData['admin_email'] ?? "admin@{$tenantId}.local",
                            'admin_name' => $organizationData['admin_name'] ?? 'Tenant Administrator'
                        ]);
                        echo "‚úÖ Credenciais de tenant provisionadas com sucesso\n";

                        // Atualizar dados do tenant com as novas credenciais
                        $provisionData = $provisionResult['data'] ?? $provisionResult;
                        if (isset($provisionData['api_key'])) {
                            $tenantData['api_key'] = $provisionData['api_key'];
                            echo "   API Key: " . substr($provisionData['api_key'], 0, 20) . "...\n";
                        }
                    } catch (Exception $e) {
                        echo "‚ö†Ô∏è  Aviso: N√£o foi poss√≠vel provisionar credenciais automaticamente: " . $e->getMessage() . "\n";
                        echo "   Ser√° necess√°rio criar um usu√°rio tenant_admin e API key manualmente\n";
                    }
                }
            } catch (Exception $e) {
                echo "‚ö†Ô∏è  Aviso: N√£o foi poss√≠vel registrar tenant para altern√¢ncia: " . $e->getMessage() . "\n";
            }

            return [
                'organization' => ['id' => $tenantId],
                'tenant' => ['id' => $tenantId] + $tenantData,
                'existed' => true
            ];
        }
    }

    // Verificar por subdom√≠nio
    if (isset($organizationData['subdomain'])) {
        $existingTenant = findTenantBySubdomain($sdk, $organizationData['subdomain']);
        if ($existingTenant) {
            echo "‚úÖ Organiza√ß√£o encontrada pelo subdom√≠nio: {$organizationData['subdomain']}\n";

            // Ajustar para a estrutura da API: {success, data, message}
            $tenantData = $existingTenant['data'] ?? $existingTenant;
            $tenantId = $tenantData['_id'] ?? $tenantData['id'] ?? 'unknown';

            // Registrar tenant existente para permitir altern√¢ncia de contexto
            try {
                echo "üîë Registrando tenant existente para altern√¢ncia de contexto...\n";
                $sdk->registerExistingTenant($tenantId, $tenantData);
                echo "‚úÖ Tenant registrado com sucesso para altern√¢ncia de contexto\n";

                // Tentar provisionar credenciais se necess√°rio
                if (!isset($tenantData['api_key']) || empty($tenantData['api_key'])) {
                    echo "üîß Tenant sem API key detectado, tentando provisionar credenciais...\n";
                    try {
                        $provisionResult = $sdk->superAdmin()->provisionTenantCredentials($tenantId, [
                            'admin_email' => $organizationData['admin_email'] ?? "admin@{$tenantId}.local",
                            'admin_name' => $organizationData['admin_name'] ?? 'Tenant Administrator'
                        ]);
                        echo "‚úÖ Credenciais de tenant provisionadas com sucesso\n";

                        // Atualizar dados do tenant com as novas credenciais
                        $provisionData = $provisionResult['data'] ?? $provisionResult;
                        if (isset($provisionData['api_key'])) {
                            $tenantData['api_key'] = $provisionData['api_key'];
                            echo "   API Key: " . substr($provisionData['api_key'], 0, 20) . "...\n";
                        }
                    } catch (Exception $e) {
                        echo "‚ö†Ô∏è  Aviso: N√£o foi poss√≠vel provisionar credenciais automaticamente: " . $e->getMessage() . "\n";
                        echo "   Ser√° necess√°rio criar um usu√°rio tenant_admin e API key manualmente\n";
                    }
                }
            } catch (Exception $e) {
                echo "‚ö†Ô∏è  Aviso: N√£o foi poss√≠vel registrar tenant para altern√¢ncia: " . $e->getMessage() . "\n";
            }

            return [
                'organization' => ['id' => $tenantId],
                'tenant' => ['id' => $tenantId] + $tenantData,
                'existed' => true
            ];
        }
    }

    echo "üìù Organiza√ß√£o n√£o encontrada, criando nova...\n";
    try {
        $result = $sdk->createOrganization($organizationData);
        $result['existed'] = false;
        return $result;
    } catch (Exception $e) {
        echo "‚ùå Erro ao criar organiza√ß√£o: " . $e->getMessage() . "\n";
        throw $e;
    }
}

/**
 * Helper function para verificar se produto j√° existe
 */
function findProductByName($sdk, $name) {
    try {
        $products = $sdk->products()->list();
        foreach ($products as $product) {
            if (isset($product['name']) && $product['name'] === $name) {
                return $product;
            }
        }
        return null;
    } catch (Exception $e) {
        echo "‚ö†Ô∏è  Erro ao buscar produtos: " . $e->getMessage() . "\n";
        return null;
    }
}

/**
 * Helper function para criar ou encontrar produto
 */
function getOrCreateProduct($sdk, $productData) {
    echo "üîç Verificando se produto '{$productData['name']}' j√° existe...\n";

    $existingProduct = findProductByName($sdk, $productData['name']);
    if ($existingProduct) {
        echo "‚úÖ Produto encontrado: {$productData['name']}\n";
        return ['product' => $existingProduct, 'existed' => true];
    }

    echo "üìù Produto n√£o encontrado, criando novo...\n";
    try {
        // Tentar m√©todo de conveni√™ncia primeiro
        try {
            $product = $sdk->createCompleteProduct($productData);
            return ['product' => $product, 'existed' => false];
        } catch (Exception $e) {
            echo "‚ÑπÔ∏è  M√©todo de conveni√™ncia falhou, tentando m√©todo alternativo...\n";
            // Tentar m√©todo alternativo
            $product = $sdk->products()->create($productData);
            return ['product' => $product, 'existed' => false];
        }
    } catch (Exception $e) {
        echo "‚ùå Erro ao criar produto: " . $e->getMessage() . "\n";
        throw $e;
    }
}

try {
    // ===============================================
    // CONFIGURA√á√ïES DO EXEMPLO
    // ===============================================

    // Configura√ß√µes personaliz√°veis do exemplo
    $EXAMPLE_CONFIG = [
        'organization' => [
            'name' => 'Nova Empresa Ltda',
            'admin_email' => 'admin@nova-empresa.com',
            'admin_name' => 'Jo√£o Admin',
            'subdomain' => 'nova-empresa',
            'custom_domain' => 'checkout.nova-empresa.com'
        ],
        'product' => [
            'name' => 'Produto Demo',
            'description' => 'Produto criado via SDK com super admin',
            'price_amount' => 9999, // R$ 99,99
            'currency' => 'BRL'
        ],
        'options' => [
            'force_recreate_org' => false,    // Se true, tentar√° deletar e recriar
            'force_recreate_product' => false, // Se true, tentar√° deletar e recriar
            'show_detailed_logs' => true,     // Mostrar logs detalhados
            'max_tenants_to_show' => 3        // Quantos tenants mostrar na listagem
        ]
    ];

    echo "=== Exemplo Resiliente de Super Admin ===\n";
    echo "üìã Configura√ß√µes:\n";
    echo "   Organiza√ß√£o: {$EXAMPLE_CONFIG['organization']['name']}\n";
    echo "   Dom√≠nio: {$EXAMPLE_CONFIG['organization']['custom_domain']}\n";
    echo "   Produto: {$EXAMPLE_CONFIG['product']['name']}\n";
    echo "   Modo resiliente: ‚úÖ Ativo (verifica antes de criar)\n\n";

    // ===============================================
    // 1. INICIALIZA√á√ÉO COMO SUPER ADMIN
    // ===============================================

    echo "=== Inicializando SDK como Super Admin ===\n";

    // Credenciais do super admin (API key como m√©todo prim√°rio, email/senha como fallback)
    $superAdminCredentials = [
        // 'api_key' => 'clb_test_c6eb0dda0da66cb65cf92dad27456bbd', // Comentado para for√ßar fallback login
        'api_key_disabled' => 'clb_test_c6eb0dda0da66cb65cf92dad27456bbd',
        'access_token' => 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2OGMwMzA1Yzg1ZDczZjg3NmY5YTBkNjUiLCJlbWFpbCI6ImFkbWluQGV4YW1wbGUuY29tIiwicm9sZXMiOlsic3lzdGVtX2FkbWluIiwic3VwZXJfYWRtaW4iXSwidGVuYW50SWQiOiI1MDdmMWY3N2JjZjg2Y2Q3OTk0MzkwMTEiLCJmYW1pbHlJZCI6ImQyMTZkZmUzLTFmMzMtNDllNi05ZWIwLTJmZWUwNjk4M2U1NSIsImdlbmVyYXRpb24iOjAsImRldmljZUZpbmdlcnByaW50IjoiZGZwLTE3NTg1NTgxODUiLCJhdWQiOlsiY2x1YmlmeS11c2VycyJdLCJpc3MiOiJjbHViaWZ5LWNoZWNrb3V0IiwidG9rZW5UeXBlIjoiYWNjZXNzIiwianRpIjoiMzUwMzgzN2UtNjk3YS00MjIyLTkxNTYtZjNhYmI5NGE1MzU1IiwiaWF0IjoxNzU4NTU4MTg1LCJleHAiOjE3NTg2NDQ1ODV9.9eZuRGnngSTIQa2Px9Yyfoaddo1m-PM20l4XxdaVMlg',
        'refresh_token' => 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2OGMwMzA1Yzg1ZDczZjg3NmY5YTBkNjUiLCJlbWFpbCI6ImFkbWluQGV4YW1wbGUuY29tIiwicm9sZXMiOlsic3lzdGVtX2FkbWluIiwic3VwZXJfYWRtaW4iXSwidGVuYW50SWQiOiI1MDdmMWY3N2JjZjg2Y2Q3OTk0MzkwMTEiLCJmYW1pbHlJZCI6ImQyMTZkZmUzLTFmMzMtNDllNi05ZWIwLTJmZWUwNjk4M2U1NSIsImdlbmVyYXRpb24iOjAsImRldmljZUZpbmdlcnByaW50IjoiZGZwLTE3NTg1NTgxODUiLCJhdWQiOlsiY2x1YmlmeS11c2VycyJdLCJpc3MiOiJjbHViaWZ5LWNoZWNrb3V0IiwidG9rZW5UeXBlIjoicmVmcmVzaCIsImp0aSI6ImJiNGU4NzQ3LTk2OGMtNDI0Yi05NDM0LTg1NTQxYjMzMjUyNyIsImlhdCI6MTc1ODU1ODE4NiwiZXhwIjoxNzU5MTYyOTg2fQ.tq3A_UQCWhpJlf8HKzKfsDJ8inKSVjc-QIfOCMK5Ei',
        // Fallback para autentica√ß√£o por usu√°rio/senha
        'email' => 'admin@example.com',
        'password' => 'P@ssw0rd!',
        'tenant_id' => '507f1f77bcf86cd799439011'
    ];

    // Configura√ß√£o completa do SDK (baseada no test-sdk-simple.php)
    $config = [
        'credentials' => [
            'tenant_id' => $superAdminCredentials['tenant_id'],
            'api_key' => $superAdminCredentials['api_key_disabled'],
            'api_secret' => '87aa1373d3a948f996cf1b066651941b2f9928507c1e963c867b4aa90fec9e15',  // Placeholder para secret
            'email' => $superAdminCredentials['email'],
            'password' => $superAdminCredentials['password']
        ],
        'environment' => 'test',
        'api' => [
            'base_url' => 'https://checkout.svelve.com/api/v1',
            'timeout' => 45,
            'retries' => 3,
            'verify_ssl' => false
        ],
        'cache' => [
            'enabled' => true,
            'ttl' => 3600
        ],
        'logging' => [
            'enabled' => true,
            'level' => 'info'
        ]
    ];

    echo "üìã Configura√ß√£o do SDK:\n";
    echo "   Tenant ID: {$config['credentials']['tenant_id']}\n";
    echo "   API Key: " . substr($config['credentials']['api_key'], 0, 20) . "...\n";
    echo "   Environment: {$config['environment']}\n";
    echo "   Base URL: {$config['api']['base_url']}\n\n";

    // Inicializar SDK com configura√ß√£o completa
    $sdk = new ClubifyCheckoutSDK($config);
    echo "‚úÖ SDK initialized successfully!\n";

    echo "   Version: " . $sdk->getVersion() . "\n";
    echo "   Authenticated: " . ($sdk->isAuthenticated() ? 'Yes' : 'No') . "\n";
    echo "   Initialized: " . ($sdk->isInitialized() ? 'Yes' : 'No') . "\n\n";

    // Inicializar como super admin
    $initResult = $sdk->initializeAsSuperAdmin($superAdminCredentials);

    echo "‚úÖ SDK inicializado como super admin:\n";
    echo "   Mode: " . $initResult['mode'] . "\n";
    echo "   Role: " . $initResult['role'] . "\n";
    echo "   Authenticated: " . ($initResult['authenticated'] ? 'Yes' : 'No') . "\n\n";

    // ===============================================
    // 2. CRIA√á√ÉO DE ORGANIZA√á√ÉO (COM VERIFICA√á√ÉO)
    // ===============================================

    echo "=== Criando ou Encontrando Organiza√ß√£o ===\n";

    $organizationData = [
        'name' => $EXAMPLE_CONFIG['organization']['name'],
        'admin_email' => $EXAMPLE_CONFIG['organization']['admin_email'],
        'admin_name' => $EXAMPLE_CONFIG['organization']['admin_name'],
        'subdomain' => $EXAMPLE_CONFIG['organization']['subdomain'],
        'custom_domain' => $EXAMPLE_CONFIG['organization']['custom_domain'],
        'settings' => [
            'timezone' => 'America/Sao_Paulo',
            'currency' => 'BRL',
            'language' => 'pt-BR'
        ],
        'features' => [
            'payments' => true,
            'subscriptions' => true,
            'webhooks' => true
        ]
    ];

    $tenantId = null;
    $organization = null;

    try {
        $organization = getOrCreateOrganization($sdk, $organizationData);

        if ($organization['existed']) {
            echo "‚úÖ Organiza√ß√£o existente encontrada:\n";
            echo "   Status: J√° existia no sistema\n";
        } else {
            echo "‚úÖ Nova organiza√ß√£o criada com sucesso:\n";
            echo "   Status: Criada agora\n";
        }

        // Extrair IDs corretamente da estrutura de dados
        $tenantData = $organization['tenant'];
        $tenantId = $tenantData['id'] ?? $tenantData['_id'] ?? 'unknown';
        $organizationId = $organization['organization']['id'] ?? $tenantId;

        echo "   Organization ID: " . $organizationId . "\n";
        echo "   Tenant ID: " . $tenantId . "\n";

        if (isset($organization['tenant']['api_key'])) {
            echo "   API Key: " . substr($organization['tenant']['api_key'], 0, 20) . "...\n";
        }
        echo "\n";
    } catch (Exception $e) {
        echo "‚ùå Falha na cria√ß√£o/busca da organiza√ß√£o: " . $e->getMessage() . "\n";
        echo "‚ÑπÔ∏è  Continuando com o restante do exemplo usando tenant padr√£o...\n\n";

        // Usar tenant padr√£o se dispon√≠vel
        $tenantId = '507f1f77bcf86cd799439011';
    }

    // ===============================================
    // 3. GERENCIAMENTO DE TENANTS (SUPER ADMIN)
    // ===============================================

    echo "=== Opera√ß√µes de Super Admin ===\n";

    // Listar todos os tenants
    try {
        $tenants = $sdk->superAdmin()->listTenants();
        echo "üìã Total de tenants: " . count($tenants['data']) . "\n";
    } catch (Exception $e) {
        echo "‚ö†Ô∏è  Erro ao listar tenants: " . $e->getMessage() . "\n";
    }

    // Obter estat√≠sticas do sistema com timeout reduzido
    try {
        echo "üìä Tentando obter estat√≠sticas do sistema (timeout: 10s)...\n";

        // Usar timeout de 10 segundos para evitar travamento
        $stats = $sdk->superAdmin()->getSystemStats(10);
        echo "üìä Organiza√ß√µes ativas: " . ($stats['organizations']['active'] ?? 'N/A') . "\n";
        echo "üìä Total de usu√°rios: " . ($stats['users']['total'] ?? 'N/A') . "\n";
    } catch (Exception $e) {
        $errorMsg = $e->getMessage();
        if (strpos($errorMsg, 'timeout') !== false ||
            strpos($errorMsg, 'timed out') !== false ||
            strpos($errorMsg, 'cURL error 28') !== false) {
            echo "‚è±Ô∏è  Timeout ao obter estat√≠sticas (10s) - endpoint pode estar lento ou indispon√≠vel: continuando...\n";
        } elseif (strpos($errorMsg, '404') !== false || strpos($errorMsg, 'not found') !== false) {
            echo "‚ÑπÔ∏è  Endpoint de estat√≠sticas ainda n√£o dispon√≠vel (404): continuando...\n";
        } else {
            echo "‚ö†Ô∏è  Erro ao obter estat√≠sticas: " . substr($errorMsg, 0, 100) . "...\n";
        }
    }
    echo "\n";

    // ===============================================
    // 4. ALTERN√ÇNCIA DE CONTEXTO
    // ===============================================

    echo "=== Alternando para Contexto de Tenant ===\n";

    if ($tenantId && $tenantId !== 'unknown') {
        try {
            echo "üîÑ Tentando alternar para tenant: $tenantId\n";
            // Alternar para o tenant criado
            $sdk->switchToTenant($tenantId);

            $context = $sdk->getCurrentContext();
            echo "‚úÖ Contexto alterado com sucesso:\n";
            echo "   Current Role: " . (isset($context['current_role']) ? $context['current_role'] : 'N/A') . "\n";
            $currentRole = isset($context['current_role']) ? $context['current_role'] : '';
            echo "   Active Context: " . ($currentRole === 'tenant_admin' ? $tenantId : 'super_admin') . "\n\n";
        } catch (Exception $e) {
            echo "‚ö†Ô∏è  Erro ao alternar contexto para tenant '$tenantId': " . $e->getMessage() . "\n";
            echo "‚ÑπÔ∏è  Continuando com contexto de super admin...\n\n";
        }
    } else {
        echo "‚ö†Ô∏è  Nenhum tenant v√°lido dispon√≠vel para alternar contexto (ID: '$tenantId')\n";
        echo "‚ÑπÔ∏è  Continuando com contexto de super admin...\n\n";
    }

    // ===============================================
    // 5. OPERA√á√ïES COMO TENANT ADMIN
    // ===============================================

    echo "=== Opera√ß√µes como Tenant Admin ===\n";

    // Primeiro listar produtos existentes
    try {
        // Listar produtos (como tenant admin) - usando m√©todo direto
        $products = $sdk->products()->list();
        echo "üì¶ Produtos existentes no tenant: " . count($products) . "\n";

        if (count($products) > 0) {
            echo "   Produtos encontrados:\n";
            foreach ($products as $product) {
                echo "   - " . (isset($product['name']) ? $product['name'] : 'Nome n√£o dispon√≠vel') . "\n";
            }
        }
        echo "\n";
    } catch (Exception $e) {
        echo "‚ÑπÔ∏è  Ainda n√£o h√° produtos para este tenant ou erro ao listar: " . $e->getMessage() . "\n\n";
    }

    // Criar um produto de exemplo usando verifica√ß√£o pr√©via
    $productData = [
        'name' => $EXAMPLE_CONFIG['product']['name'],
        'description' => $EXAMPLE_CONFIG['product']['description'],
        'price' => [
            'amount' => $EXAMPLE_CONFIG['product']['price_amount'],
            'currency' => $EXAMPLE_CONFIG['product']['currency']
        ],
        'type' => 'digital'
    ];

    try {
        $productResult = getOrCreateProduct($sdk, $productData);

        $productName = $productResult['product']['name'] ?? $productResult['product']['data']['name'] ?? 'Nome n√£o dispon√≠vel';

        if ($productResult['existed']) {
            echo "‚úÖ Produto existente encontrado: " . $productName . "\n";
            echo "   Status: J√° existia no sistema\n";
        } else {
            echo "‚úÖ Novo produto criado: " . $productName . "\n";
            echo "   Status: Criado agora\n";
        }
    } catch (Exception $e) {
        echo "‚ö†Ô∏è  Erro na opera√ß√£o de produto: " . $e->getMessage() . "\n";
        echo "‚ÑπÔ∏è  Continuando com outras opera√ß√µes...\n";
    }

    // ===============================================
    // 6. VOLTA PARA SUPER ADMIN
    // ===============================================

    echo "\n=== Voltando para Super Admin ===\n";

    try {
        // Alternar de volta para super admin
        $sdk->switchToSuperAdmin();

        $context = $sdk->getCurrentContext();
        echo "üîÑ Contexto alterado para: " . (isset($context['current_role']) ? $context['current_role'] : 'N/A') . "\n";
    } catch (Exception $e) {
        echo "‚ö†Ô∏è  Erro ao voltar para super admin: " . $e->getMessage() . "\n";
        echo "‚ÑπÔ∏è  Continuando com opera√ß√µes...\n";
    }

    // Agora podemos fazer opera√ß√µes de super admin novamente
    if ($tenantId) {
        try {
            $tenantCredentials = $sdk->superAdmin()->getTenantCredentials($tenantId);
            echo "üîë Credenciais do tenant obtidas com sucesso\n";
        } catch (Exception $e) {
            echo "‚ö†Ô∏è  Erro ao obter credenciais do tenant: " . $e->getMessage() . "\n";
        }
    }

    // ===============================================
    // 7. GEST√ÉO AVAN√áADA DE TENANTS
    // ===============================================

    echo "\n=== Gest√£o Avan√ßada de Tenants ===\n";

    // Verificar credenciais atuais antes de regenerar
    if ($tenantId) {
        try {
            $currentCredentials = $sdk->superAdmin()->getTenantCredentials($tenantId);
            echo "üîç Credenciais atuais obtidas com sucesso\n";
            echo "   Current API Key: " . substr($currentCredentials['api_key'] ?? 'N/A', 0, 20) . "...\n";

            // Endpoint de regenerar API key n√£o dispon√≠vel no momento
            echo "‚ÑπÔ∏è  Funcionalidade de regenerar API key ainda n√£o implementada\n";
            echo "   Endpoint necess√°rio: POST /api-keys/{keyId}/rotate\n";
        } catch (Exception $e) {
            echo "‚ö†Ô∏è  Erro na gest√£o de credenciais: " . $e->getMessage() . "\n";
            echo "   Continuando com outras opera√ß√µes...\n";
        }
    } else {
        echo "‚ö†Ô∏è  Nenhum tenant dispon√≠vel para gest√£o de credenciais\n";
    }

    // Listar tenants (API n√£o suporta filtros espec√≠ficos no momento)
    try {
        $filteredTenants = $sdk->superAdmin()->listTenants();
        echo "üìã Total de tenants encontrados: " . count($filteredTenants['data']) . "\n";

        // Mostrar alguns detalhes dos tenants encontrados
        if (count($filteredTenants['data']) > 0) {
            $maxToShow = $EXAMPLE_CONFIG['options']['max_tenants_to_show'];
            echo "   Primeiros tenants (m√°ximo $maxToShow):\n";
            $count = 0;
            foreach ($filteredTenants['data'] as $tenant) {
                if ($count >= $maxToShow) break;
                $name = $tenant['name'] ?? $tenant['subdomain'] ?? 'Nome n√£o dispon√≠vel';
                $status = $tenant['status'] ?? 'Status n√£o dispon√≠vel';
                echo "   - $name (Status: $status)\n";
                $count++;
            }
            if (count($filteredTenants['data']) > $maxToShow) {
                echo "   ... e mais " . (count($filteredTenants['data']) - $maxToShow) . " tenant(s)\n";
            }
        }
    } catch (Exception $e) {
        echo "‚ö†Ô∏è  Erro ao listar tenants filtrados: " . $e->getMessage() . "\n";
    }

    // ===============================================
    // 8. INFORMA√á√ïES DE CONTEXTO
    // ===============================================

    echo "\n=== Informa√ß√µes do Contexto Atual ===\n";

    try {
        $finalContext = $sdk->getCurrentContext();
        echo "üìç Modo de opera√ß√£o: " . (isset($finalContext['mode']) ? $finalContext['mode'] : 'N/A') . "\n";
        echo "üë§ Role atual: " . (isset($finalContext['current_role']) ? $finalContext['current_role'] : 'N/A') . "\n";

        if (isset($finalContext['available_contexts']['contexts'])) {
            echo "üè¢ Contextos dispon√≠veis: " . count($finalContext['available_contexts']['contexts']) . "\n";
        } else {
            echo "üè¢ Contextos dispon√≠veis: N/A\n";
        }
    } catch (Exception $e) {
        echo "‚ö†Ô∏è  Erro ao obter contexto atual: " . $e->getMessage() . "\n";
    }

    // ===============================================
    // 9. RESUMO FINAL
    // ===============================================

    echo "\n=== Resumo da Execu√ß√£o ===\n";
    echo "‚úÖ SDK inicializado como super admin\n";
    echo ($organization ? "‚úÖ" : "‚ö†Ô∏è ") . " Organiza√ß√£o " . ($organization ? "verificada/criada" : "falhou, mas continuou") . "\n";
    echo "‚úÖ Contexto de tenant testado\n";
    echo "‚úÖ Opera√ß√µes de produto testadas\n";
    echo "‚úÖ Retorno para super admin testado\n";
    echo "‚úÖ Gest√£o de credenciais testada\n";
    echo "‚úÖ Informa√ß√µes de contexto verificadas\n";
    echo "\nüéâ Exemplo de Super Admin conclu√≠do!\n";
    echo "üìù Todas as opera√ß√µes foram executadas com tratamento de erro.\n";
    echo "üìù O script continua executando mesmo quando algumas opera√ß√µes falham.\n";
    echo "üìù Script resiliente a conflitos e erros de API.\n";

} catch (Exception $e) {
    echo "\n‚ùå ERRO CR√çTICO: " . $e->getMessage() . "\n";
    echo "\nüìã Detalhes do erro:\n";
    echo "   Tipo: " . get_class($e) . "\n";
    echo "   Arquivo: " . $e->getFile() . "\n";
    echo "   Linha: " . $e->getLine() . "\n";

    // Verificar se √© um erro espec√≠fico conhecido
    if (strpos($e->getMessage(), 'already in use') !== false) {
        echo "\nüí° DICA: Este erro indica que um recurso j√° existe.\n";
        echo "   O script foi atualizado para lidar com isso automaticamente.\n";
        echo "   Se voc√™ ainda est√° vendo este erro, pode ser necess√°rio verificar\n";
        echo "   a l√≥gica de detec√ß√£o de recursos existentes.\n";
    } elseif (strpos($e->getMessage(), 'HTTP request failed') !== false) {
        echo "\nüí° DICA: Erro de comunica√ß√£o com a API.\n";
        echo "   Verifique:\n";
        echo "   - Conex√£o com a internet\n";
        echo "   - URL da API est√° correta\n";
        echo "   - Credenciais est√£o v√°lidas\n";
        echo "   - Servi√ßo est√° funcionando\n";
    } elseif (strpos($e->getMessage(), 'Unauthorized') !== false || strpos($e->getMessage(), '401') !== false) {
        echo "\nüí° DICA: Erro de autentica√ß√£o.\n";
        echo "   Verifique:\n";
        echo "   - Email e senha est√£o corretos\n";
        echo "   - API key est√° v√°lida\n";
        echo "   - Usu√°rio tem permiss√µes de super admin\n";
    }

    echo "\nüìã Stack trace completo:\n";
    echo $e->getTraceAsString() . "\n";

    echo "\nüîÑ Para tentar novamente, execute o script novamente.\n";
    echo "   O script agora verifica recursos existentes antes de criar.\n";
}